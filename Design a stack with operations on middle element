
#include <stdio.h>
#include <stdlib.h>

struct dll 
{
    int data;
    struct dll *prev , *link;
};

struct myStack
{
    struct dll *head,*mid;
    int count ;
};

struct myStack *createMyStack()
{
    struct myStack *ms = (struct myStack *)malloc(sizeof(struct myStack));
    ms -> count = 0 ;
    return ms;
}

void push(struct myStack *ms,int data)
{
    struct dll *temp = (struct dll *)malloc(sizeof(struct dll));
    
    temp -> data = data;
    temp -> prev = NULL;
    temp -> link = ms -> head;
    
    ms -> count += 1;
    
    //change mid pointer only if count is odd 
    if(ms -> count == 1)
    ms -> mid = temp;
    else
    {
        ms -> head -> prev = temp;
        
        if(ms -> count & 1)
        ms -> mid = ms -> mid -> prev;
    }
    
    ms->head = temp;
    
}

int pop(struct myStack *ms)
{
    if(ms -> count ==0)
    {
        printf("stack empty");
        exit(0);
    }
    
    struct dll *head = ms -> head;
    int item = head -> data;
    ms -> head = head -> link;
    
    if(ms -> head != NULL)
    ms -> head -> prev = NULL;
    
    ms -> count -= 1;
    
    //if we have even no of elements
    if(!((ms->count) &1))
    ms -> mid = ms -> mid -> link;
    
    return item;
}

int findMiddle(struct myStack *ms) 
{ 
    if (ms->count  ==  0) 
    { 
        printf("Stack is empty now\n"); 
        return -1; 
    } 
  
    return ms->mid->data; 
} 
int main()
{
    struct myStack *ms = createMyStack(); 
    push(ms, 11); 
    push(ms, 22); 
    push(ms, 33); 
    push(ms, 44); 
    push(ms, 55); 
    push(ms, 66); 
    push(ms, 77); 
    
     printf("Item popped is %d\n", pop(ms)); 
    printf("Item popped is %d\n", pop(ms)); 
    printf("Middle Element is %d\n", findMiddle(ms)); 

    return 0;
}
